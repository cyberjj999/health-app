package healthApp.controller;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Random;
import java.util.ResourceBundle;

import healthApp.data.UsersFoodConsumptionDB;
import healthApp.data.UsersMapDB;
import healthApp.model.Food;
import healthApp.model.Users;
import healthApp.model.UsersFoodConsumption;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

public class ConsumedFoodInfoController implements Initializable {
	
	private static String loggedInUser;
	
	public String getLoggedInUser() {
		return loggedInUser;
	}



	public void setLoggedInUser(String loggedInUser) {
		this.loggedInUser = loggedInUser;
	}
	
    @FXML
    private Label foodNameLabel;

    @FXML
    private ImageView foodImage;

    @FXML
    private Label servingSizeLabel;

    @FXML
    private Label caloriesLabel;

    @FXML
    private Label carbsLabel;

    @FXML
    private Label portionLabel;

    @FXML
    private Label fatsLabel;

    @FXML
    private Label sodiumLabel;

    @FXML
    private Label sugarLabel;

    @FXML
    private Label cholesterolLabel;

    @FXML
    private Label descriptionLabel;

   // @FXML
   // private Button backBtn;

    @FXML
    private Label proteinLabel;

    @FXML
    private ImageView exerciseImage;

    @FXML
    private Label exerciseDescriptionLabel;
    
    private double calPerMin = 0;
    private String exercise = "";
    private Scene myScene;
		private ImageView locationBtn;
		@FXML
		private ImageView reminderBtn;
		@FXML
		private ImageView exerciseBtn;
		@FXML
		private ImageView homeBtn;
		@FXML
		private ImageView foodBtn;
		@FXML
		private ImageView socialBtn;
	   


  @FXML
		public void goLocation(MouseEvent event) throws IOException {

				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			// Event Listener on ImageView[#reminderBtn].onMouseClicked
			@FXML
			public void goReminder(MouseEvent event) throws IOException {
				// TODO Autogenerated
				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			// Event Listener on ImageView[#exerciseBtn].onMouseClicked
			@FXML
			public void goExercise(MouseEvent event) throws IOException {
				// TODO Autogenerated
				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			// Event Listener on ImageView[#homeBtn].onMouseClicked
			@FXML
			public void goHome(MouseEvent event) throws IOException {
				// TODO Autogenerated
				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/HomepageView.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			// Event Listener on ImageView[#foodBtn].onMouseClicked
			@FXML
			public void goFood(MouseEvent event) throws IOException {
				// TODO Autogenerated
				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			// Event Listener on ImageView[#socialBtn].onMouseClicked
			@FXML
			public void goSocial(MouseEvent event) throws IOException {
				// TODO Autogenerated
				FXMLLoader loader=new FXMLLoader();
				loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
				 myScene=(Scene)((Node)event.getSource()).getScene();
				 Stage stage=(Stage)(myScene).getWindow();
				 Parent nextView=loader.load();
				 stage.setScene(new Scene(nextView));
				 stage.show();
			}
			
			
    
    @FXML
    private ImageView backBtn;
    @FXML
    void goBack(MouseEvent event) throws IOException {
    	FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/ViewFoodConsumed.fxml")));
		Scene myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	
			ViewFoodConsumedController vFCC = loader.getController();
			UsersFoodConsumptionDB UsersFoodDB = new UsersFoodConsumptionDB();

			UsersMapDB usersDB = new UsersMapDB();
			Users loggedInUser = usersDB.checkLoggedIn(getLoggedInUser());
			
			
			if(UsersFoodDB.getUsers(loggedInUser.getEmail())==null) {
				System.out.println("No such user");
			}
			
			else {
			UsersFoodConsumption testUser = UsersFoodDB.getUsers(loggedInUser.getEmail());
			ArrayList <Food> FoodArrayList = testUser.getFoodArrayList();
			ArrayList <String> foodList = new ArrayList <String>();
			double totalCalories = 0;
			double totalProtein = 0;
			double totalCarbs = 0;
			double totalFats = 0;
			double totalCholesterol = 0;
			double totalSugar = 0;
			double totalSodium = 0;
			
			for (Food foodItems : FoodArrayList) {
				foodList.add(foodItems.getName());
				totalCalories+=foodItems.getCalories();
				totalProtein+=foodItems.getProtein();
				totalCarbs+=foodItems.getCarbs();
				totalFats+=foodItems.getFats();
				totalCholesterol+=foodItems.getCholesterol();
				totalSugar+=foodItems.getSugar();
				totalSodium+=foodItems.getSodium();
			}
			vFCC.addToVbox(foodList);
			
			vFCC.setCalories(totalCalories);
			vFCC.setProtein(totalProtein);
			vFCC.setCarbs(totalCarbs);
			vFCC.setFats(totalFats);
			vFCC.setCholesterol(totalCholesterol);
			vFCC.setSugar(totalSugar);
			vFCC.setSodium(totalSodium);
			
			System.out.println(testUser.getFoodArrayList());
			}
			
			Random rand = new Random();
	    	int n = rand.nextInt(3) + 1;
	    	loadImage(n);
	    	
    }
    
    /*
    @FXML
    void goBack(ActionEvent event) throws IOException {
    	FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/ViewFoodConsumed.fxml")));
		Scene myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	
			ViewFoodConsumedController vFCC = loader.getController();
		
			UsersMapDB usersDB = new UsersMapDB();
			Users loggedInUser = usersDB.checkLoggedIn(getLoggedInUser());
			System.out.println("The logged in User is " + loggedInUser.getName());
			System.out.println("The email of the logged in User is : " + getLoggedInUser());
			
			if(UsersFoodDB.getUsers(loggedInUser.getEmail())==null) {
				System.out.println("No such user");
			}
			
			else {
			UsersFoodConsumption testUser = UsersFoodDB.getUsers(loggedInUser.getEmail());
			ArrayList <Food> FoodArrayList = testUser.getFoodArrayList();
			ArrayList <String> foodList = new ArrayList <String>();
			double totalCalories = 0;
			double totalProtein = 0;
			double totalCarbs = 0;
			double totalFats = 0;
			double totalCholesterol = 0;
			double totalSugar = 0;
			double totalSodium = 0;
			
			for (Food foodItems : FoodArrayList) {
				foodList.add(foodItems.getName());
				totalCalories+=foodItems.getCalories();
				totalProtein+=foodItems.getProtein();
				totalCarbs+=foodItems.getCarbs();
				totalFats+=foodItems.getFats();
				totalCholesterol+=foodItems.getCholesterol();
				totalSugar+=foodItems.getSugar();
				totalSodium+=foodItems.getSodium();
			}
			vFCC.addToVbox(foodList);
			
			vFCC.setCalories(totalCalories);
			vFCC.setProtein(totalProtein);
			vFCC.setCarbs(totalCarbs);
			vFCC.setFats(totalFats);
			vFCC.setCholesterol(totalCholesterol);
			vFCC.setSugar(totalSugar);
			vFCC.setSodium(totalSodium);
			
			System.out.println(testUser.getFoodArrayList());
			}
			
			Random rand = new Random();
	    	int n = rand.nextInt(3) + 1;
	    	loadImage(n);
	    	
			
    }*/
    
    
    public void loadImage(int num) {
		
		String fileName;
		switch (num) {
			
		case 1 :  {
			fileName = "jogging.jpg";
			calPerMin = 10;
			exercise = "jog";
			
		}
			break;
		
		case 2 :  {
			fileName = "badminton.jpg";
			calPerMin = 8;
			exercise = "play badminton";
		
		}
			break;
		
		
		
		case 3 :  {
			fileName = "swimming.jpg";
			calPerMin = 11.5;
			exercise = "swim";
			
		}
			break;
		
		default: fileName = "foodNotFound.jpg";
		break;
		
			
		}
		System.out.println("The file name is " + fileName);

		Path dPath = FileSystems.getDefault().getPath("foodImg",fileName);
		File foodImg = new File(dPath.toUri());
	
		Image image = new Image(foodImg.toURI().toString());
		exerciseImage.setImage(image);
		
		exerciseDescriptionLabel.setText("Our recommendation : To burn off " + getCalories() +" calories, you have to " + exercise
    	+ " for " + (int) (getCalories()/calPerMin) + " minutes");
		
	}

    @Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
    	if (exerciseDescriptionLabel==null || descriptionLabel==null) {
    		
    	}
    	else {
    	exerciseDescriptionLabel.setMaxWidth(142);
    	exerciseDescriptionLabel.setWrapText(true);
    	descriptionLabel.setMaxWidth(135);
    	descriptionLabel.setWrapText(true);
    	}
	}
    
	public void setFoodName(String foodName) {
		foodNameLabel.setText(foodName);
		
	}
	
	public void setDescription(String description) {
		descriptionLabel.setText(description);
		
	}
	public void setServingSize(double servingSize ,String servingSizeUnit) {
		servingSizeLabel.setText("Serving size: " + servingSize + " " + servingSizeUnit);
		
	}
	public void setCalories(double calories) {
		caloriesLabel.setText("Calories: " + Double.toString(calories) + "kcal");
		
	}
	public void setProtein(double protein) {
		proteinLabel.setText("Protein: " + Double.toString(protein) + "g");
		
	}
	public void setCarbs(double carbs) {
		carbsLabel.setText("Carbs: " + Double.toString(carbs) + "g");
	}
	public void setFats(double fats) {
		fatsLabel.setText("Fats: " + Double.toString(fats) + "g");
	}
	
	public void setSodium(double sodium) {
		sodiumLabel.setText("Sodium: " + Double.toString(sodium) + "mg");
	}
	
	public void setCholesterol(double cholesterol) {
		cholesterolLabel.setText("Cholesterol: " + Double.toString(cholesterol) + "mmol//L");
	}
	
	public void setSugar(double sugar) {
		sugarLabel.setText("Sugar: " + Double.toString(sugar) + "g");
	}
	
	public void setPortion(int portion) {
	    	portionLabel.setText("Portion: " + Integer.toString(portion));
	    }
	
	public double getCalories() {
		String string1 = caloriesLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double caloriesValue = Double.parseDouble(newString2.trim()); 
		return caloriesValue;
		
	}


	public ImageView getFoodImage() {
		return foodImage;
	}


	public void setFoodImage(ImageView foodImage) {
		this.foodImage = foodImage;
	}

}
