package healthApp.controller;


import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.input.KeyCode;
import javafx.event.EventHandler;

import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.ConcurrentNavigableMap;

import javax.imageio.ImageIO;

import org.mapdb.DB;

import application.Main;
import healthApp.model.AdminMessage;
import healthApp.model.Food;

import healthApp.model.UsersFoodConsumption;
import healthApp.data.*;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.stage.Modality;
import javafx.stage.Stage;

import javafx.scene.Node;
import javafx.scene.Parent;



public class NutritionTrackingHomepageController implements Initializable{
	@FXML
	private Button viewAll;
	@FXML
	private ImageView breadAndCereal;
	@FXML
	private ImageView fruitsAndVegetables;
	@FXML
	private ImageView milk;
	@FXML
	private ImageView meat;
	@FXML
	private TextField foodSearchField;
	
	private Scene myScene;
	
	
	private ConcurrentNavigableMap<String, Food> map;
	private String userSearch;
	
	FoodDB foodDatabase = new FoodDB();
	
	
	filteredSearchResultController fSRC = new filteredSearchResultController();

    @FXML
    private ImageView backBtn;
	private ImageView locationBtn;
	@FXML
	private ImageView reminderBtn;
	@FXML
	private ImageView exerciseBtn;
	@FXML
	private ImageView homeBtn;
	@FXML
	private ImageView foodBtn;
	@FXML
	private ImageView socialBtn;
    @FXML
    void goBack(MouseEvent event) throws IOException {
    	FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/HomepageView.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
    }
    
	@FXML
	public void goLocation(MouseEvent event) throws IOException {

		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	// Event Listener on ImageView[#reminderBtn].onMouseClicked
	@FXML
	public void goReminder(MouseEvent event) throws IOException {
		// TODO Autogenerated
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	// Event Listener on ImageView[#exerciseBtn].onMouseClicked
	@FXML
	public void goExercise(MouseEvent event) throws IOException {
		// TODO Autogenerated
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	// Event Listener on ImageView[#homeBtn].onMouseClicked
	@FXML
	public void goHome(MouseEvent event) throws IOException {
		// TODO Autogenerated
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/HomepageView.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	// Event Listener on ImageView[#foodBtn].onMouseClicked
	@FXML
	public void goFood(MouseEvent event) throws IOException {
		// TODO Autogenerated
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	// Event Listener on ImageView[#socialBtn].onMouseClicked
	@FXML
	public void goSocial(MouseEvent event) throws IOException {
		// TODO Autogenerated
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.show();
	}
	
	// Event Listener on Button[#viewAll].onAction
	@FXML
	public void viewAllFood(ActionEvent event) throws IOException {
		ArrayList <String> foodList = new ArrayList <String>();
		ArrayList <Food> allFood = new ArrayList<Food>(foodDatabase.getMap().values());

		for (Food foodItem : allFood) {
			foodList.add(foodItem.getName());
		}
		
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/filteredSearchResult.fxml")));
		myScene=(Scene)((Node)event.getSource()).getScene();
		Stage stage=(Stage)(myScene).getWindow();
		Parent nextView=loader.load();
		stage.setScene(new Scene(nextView));
		stage.show();	
		
		filteredSearchResultController fSRC = loader.getController();
		fSRC.addToVbox(foodList);
		fSRC.setSearchResultX(foodList);
		fSRC.setInputFoodX("All food");
	
	}
	// Event Listener on ImageView[#breadAndCereal].onMouseClicked
	@FXML
	public void filterBreadAndCereal(MouseEvent event) throws IOException {
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/filteredBreadAndCereal.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.setTitle("Bread and Cereal");
		 stage.show();
	}
	// Event Listener on ImageView[#fruitsAndVegetables].onMouseClicked
	@FXML
	public void filterFruitsAndVegetables(MouseEvent event) throws IOException {
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/filteredFruitsAndVegetables.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.setTitle("Fruits and Vegetables");
		 stage.show();
	}
	// Event Listener on ImageView[#milk].onMouseClicked
	@FXML
	public void filterMilk(MouseEvent event) throws IOException {
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation((getClass().getResource("/healthApp/view/filteredMilk.fxml")));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.setTitle("Milk");
		 stage.show();
		 
	}
	
		// Event Listener on ImageView[#meat].onMouseClicked
		@FXML
		public void filterMeat(MouseEvent event) throws IOException {
		FXMLLoader loader=new FXMLLoader();
		loader.setLocation(Main.class.getResource("/healthApp/view/filteredMeat.fxml"));
		 myScene=(Scene)((Node)event.getSource()).getScene();
		 Stage stage=(Stage)(myScene).getWindow();
		 Parent nextView=loader.load();
		 stage.setScene(new Scene(nextView));
		 stage.setTitle("Meat");
		 stage.show();
	}
	
		//Event Listener on TextField[#foodSearchField].onAction
		@FXML
		public void foodSearch(ActionEvent event) throws IOException {
		
			
		ArrayList <String> foodList = new ArrayList <String>();
		ArrayList <Food> allFood = new ArrayList<Food>(foodDatabase.getMap().values());
		
		for (Food foodItem : allFood) {
			foodList.add(foodItem.getName());
		}
			
		//ArrayList <String> foodList = foodDataBaseApp.returnFoodList();
		
			//This is arraylist of the names of the food
			//FROM mapDB , hence it will have ALL food names
			//ArrayList <food> allFood = new ArrayList<food>(map.values());
			
			//This is the resultedFood search result
			ArrayList <String> searchResult = new ArrayList <String>();
			//String inputFood = foodSearchField.getText();
			setUserSearch(foodSearchField.getText());
			String inputFood = getUserSearch();
			
			if (inputFood.trim().length()<1) {
			//this is to check if user only enter space
				searchResult.add("invalidSearch");
			}
			
			else {
				String newFood = inputFood.replaceAll(" ","");
			
			//.matches check if the String contains something
			//In this case , it checks for if the input has alphabets or letters
			//The complement of it is use , hence the else if statement will only run if
			//the input does not have alphabet or letters
			
			if ( !((newFood.matches("[a-zA-Z]+")) || (newFood.matches("[0-9]+")))  ){
				searchResult.add("invalidSearch");
			}
		
			else {
			for (String food : foodList) {
				
				//inputFood is eg Chicken   	
				//foodProducts is eg Chicken Rice
				if (food.toUpperCase().contains(inputFood.toUpperCase()))
				searchResult.add(food);
				}
			}
			
		}
			
			//At this point , you basically just modified the searchResult arrayList
			//based on what user has entered in the textfield 
			
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/filteredSearchResult.fxml")));
			myScene=(Scene)((Node)event.getSource()).getScene();
			Stage stage=(Stage)(myScene).getWindow();
			Parent nextView=loader.load();
			stage.setScene(new Scene(nextView));
			stage.show();			
			 
			filteredSearchResultController fSRC = loader.getController();
			fSRC.setSearchResult(inputFood);
			
			if(searchResult.isEmpty())
				System.out.println("Food not found!");
			
			else if(searchResult.get(0) == "invalidSearch")
				System.out.println("Invalid search!\nPlease enter a valid a food name!");
			
			else
			System.out.println(searchResult);
			
			fSRC.addToVbox(searchResult);
			
			fSRC.setSearchResultX(searchResult);
			fSRC.setInputFoodX(inputFood);
			
			//selectedFoodController sFC = loader.getController();
			//sFC.setSearchResult(searchResult);
			
		}
		
		
	
		
		
		/*
		public void loadImage() {
			Path dPath = FileSystems.getDefault().getPath("img", "meat.jpg");
			File meatImg = new File(dPath.toUri());
			//String img = meatImg.toString();
			//ImageView = new ImageView(img);
			Image image = new Image(meatImg.toURI().toString());

			
			
			//Image imgOfMeat = new Image(meatImg)
			//Image imgOfMeat = ImageIO.read(meatImg);
			meat.setImage(image);
			
		}

		@Override
		public void initialize(URL arg0, ResourceBundle arg1) {
			loadImage();			
		}
		*/
		
		public ConcurrentNavigableMap<String, Food> getMap(){
			return map;
			}
		
		public void setUserSearch(String userSearch) {
			this.userSearch = userSearch;
		}
		
		public String getUserSearch() {
			return userSearch;
		}
		
		@Override
		public void initialize(URL arg0, ResourceBundle arg1) {
			viewAll.setStyle("-fx-border-color: #17202A; -fx-border-width: 3px;-fx-background-color:pink;");
			//Here
			FoodDB foodData = new FoodDB();
			
			//You can add food into database by creating new objects here!
			// create a food object
			Food food1 = new Food("Chicken Rice",607.0 ,25.0 ,75.0 ,23.0 ,0.0 ,1287.0 ,47.0,1,"plate");
			food1.setDescription("The Hainanese chicken rice is a "
					+ "dish that consists of succulent steamed white chicken cut into"
					+ " bite-size pieces and served on fragrant rice with some light soy sauce.");
			/*
			ArrayList <String> food1Category = food1.getCategory();
			food1Category.add("MEAT");
			food1Category.add("Chicken");
			food1Category.add("Rice");
			food1.setCategory(food1Category);
			*/
			food1.setCategory("MEAT,Chicken,Rice");
			foodData.addFood(food1);
			
			// create another food object
			Food food2= new Food("Chicken Soup(KFC)",400 ,20 ,5 ,55 ,66.0 ,20 ,0,1,"bowl");
			food2.setDescription("Chicken soup in the Philippines is called sopas "
					+ "and has some western influences in it. "
					+ "While there are many variations in the recipe, "
					+ "it usually contains chicken strips in broth.");
			/*
			ArrayList <String> food2Category = food2.getCategory();
			food2Category.add("MEAT");
			food2Category.add("Chicken");
			
			food2.setCategory(food2Category);
			*/
			food2.setCategory("MEAT,Chicken");
			foodData.addFood(food2);
			
			Food food3 = new Food("Fried Chicken",420 ,25 ,11 ,40 ,5.130 ,400 ,204,2,"piece");
			food3.setDescription("Fried chicken (also referred to as Southern fried "
					+ "chicken for the variant in the United States) "
					+ "is a dish consisting of chicken pieces usually "
					+ "from broiler chickens.");
			/*
			ArrayList <String> food3Category = food3.getCategory();
			food3Category.add("MEAT");
			food3Category.add("Chicken");
	
			food1.setCategory(food3Category);
			*/
			food3.setCategory("MEAT,Chicken");
			foodData.addFood(food3);
			
			Food food4 = new Food("Steamed Chicken",0 ,0 ,0 ,0 ,0.0 ,0 ,0,1000,"g");
			food4.setDescription("A steamed chicken");
			/*
			ArrayList <String> food4Category = food4.getCategory();
			food4Category.add("MEAT");
			food4Category.add("Chicken");
		
			food4.setCategory(food4Category);
			*/
			food4.setCategory("MEAT,Chicken");
			foodData.addFood(food4);
			
			
			Food food5 = new Food("Pork lard",0 ,0 ,0 ,0 ,0.0 ,0 ,0 ,200,"g");
			food5.setDescription("Pork lard duh");
			/*
			ArrayList <String> food5Category = food5.getCategory();
			food5Category.add("MEAT");
			food5Category.add("Pork");
		
			food5.setCategory(food5Category);
			*/
			food5.setCategory("MEAT,Pork");
			foodData.addFood(food5);
			
			Food food6 = new Food("Salad",152 ,1 ,15 ,10 ,12.0 ,203 ,4 ,1,"bowl");
			food6.setDescription("freezing and served with your choice of dressing. Our salad bar is stocked with iceberg"
					+ " lettuce, tomatoes, cucumber slices, bell peppers, "
					+ "cabbage, carrots, celery sticks");
			
			food6.setCategory("FRUITSANDVEGETABLES,HerbageVegetables");
			foodData.addFood(food6);
			
			/*
			UsersMapDB UsersDB = new UsersMapDB();
			Users user1 = new Users("name1","username1","mailinput1","toggleon1","health1","location1");
			Users user2 = new Users("name2","username2","mailinput2","toggleon2","health2","location2");
			Users user3 = new Users("name3","username3","mailinput3","toggleon3","health3","location3");
			UsersDB.addUsers(user1);
			UsersDB.addUsers(user2);
			UsersDB.addUsers(user3);
			*/
			
			//AdminMsgDB.addAdminMessage(testAM);
			
			
			
			UsersFoodConsumptionDB UsersFoodDB = new UsersFoodConsumptionDB();
			if(UsersFoodDB.getUsers("User1")==null)
				System.out.println("null users!");
			else {
			UsersFoodConsumption UserFood1 = UsersFoodDB.getUsers("User1");
			ArrayList <Food> FoodArrayList = UserFood1.getFoodArrayList();
			ArrayList <Integer> PortionArrayList = UserFood1.getPortionArrayList();
			ArrayList <String> DateArrayList = UserFood1.getDateArrayList();
			
			for(int i=0;i<FoodArrayList.size();i++) {
				if(FoodArrayList.get(i).getName().equals("ERRORxERROR")) {
					FoodArrayList.remove(i);
				}
			}
			
			for(int j=0;j<PortionArrayList.size();j++) {
				if(PortionArrayList.get(j) == 99) {
					PortionArrayList.remove(j);
				}
			}
			for(int k=0;k<DateArrayList.size();k++) {
				
				if(DateArrayList.get(k).equals("Nothing")){
					System.out.println("You have 99 in ur arraylist");
					DateArrayList.remove(k);
				}
				else 
					System.out.println("Nothing has changed!");
			
			
			System.out.println(UserFood1.getFoodArrayList());
			UserFood1.setFoodArrayList(FoodArrayList);
			UserFood1.setPortionArrayList(PortionArrayList);
			UsersFoodDB.updateArrayList(UserFood1);
			
				}
			}
		}
}	

