package healthApp.controller;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.ResourceBundle;
import java.util.Scanner;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;

public class LocationController implements Initializable{
	@FXML
	private TextField searchBar;
	@FXML
	private ListView searchList;
	@FXML
	private Button searchButton;
	
	private ArrayList<String> locationArray = new ArrayList<String>();
	private static String getLocation = "Empty";
	
	Path dPath = FileSystems.getDefault().getPath("locationData", "locations.txt");
	File file = new File(dPath.toUri());
	
	public void toHomepage(MouseEvent event) {
		try {
			Parent homePageLoader = FXMLLoader.load(getClass().getResource("/healthApp/view/HomepageView.fxml"));
			Scene homePageScene = new Scene(homePageLoader);
		
			Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
			window.setScene(homePageScene);
			window.show();
		}
		
		catch(IOException e) {
		}
	}
	
	public void toMainPage(MouseEvent event) {
		// TODO Autogenerated
		try {
			Parent mainPageLoader = FXMLLoader.load(getClass().getResource("/healthApp/view/SocialFunctionView.fxml"));
			Scene mainPageScene = new Scene(mainPageLoader);
		
			Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
			window.setScene(mainPageScene);
			window.show();
		}
		
		catch(IOException e) {
		}
	}
    
	private void handleSearchByKey(String oldVal, String newVal) {
	    if ( oldVal != null && (newVal.length() < oldVal.length()) ) {
	    	searchList.getItems().clear();
			for(int i = 0; i < locationArray.size(); i++) {
				ObservableList<String> locations = FXCollections.observableArrayList(locationArray.get(i).toString());
				searchList.getItems().addAll(locations);

			}	
	    }
	     
	    String[] parts = newVal.toUpperCase().split(" ");
	 
	    ObservableList<String> subentries = FXCollections.observableArrayList();
	    for ( Object entry: searchList.getItems() ) {
	        boolean match = true;
	        String entryText = (String)entry;
	        for ( String part: parts ) {
	            if ( ! entryText.toUpperCase().contains(part) ) {
	                match = false;
	                break;
	            }
	        }
	 
	        if ( match ) {
	            subentries.add(entryText);
	        }
	    }
	    searchList.setItems(subentries);
	}
	
	public void onSelection(ActionEvent event) {
		// TODO Autogenerated
		Path ERpath = FileSystems.getDefault().getPath("locationData", "EastRegion.txt");
		File ERfile = new File(ERpath.toUri());
		
		ArrayList<String> ERArray = new ArrayList<String>();
		try(Scanner in = new Scanner(ERfile)){
			while(in.hasNextLine()) {
				ERArray.add(in.nextLine());
			}
		}
		catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		Path NRpath = FileSystems.getDefault().getPath("locationData", "NorthRegion.txt");
		File NRfile = new File(NRpath.toUri());
		
		ArrayList<String> NRArray = new ArrayList<String>();
		try(Scanner sc = new Scanner(NRfile)){
			while(sc.hasNextLine()) {
				NRArray.add(sc.nextLine());
			}
		}
		catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		String selectedLocation = searchBar.getText();
		
		for(String ERS : ERArray) {
			if(selectedLocation.equals(ERS)) {
				getLocation = "East";
			}
		}
		
		for(String NRS : NRArray) {
			if(selectedLocation.equals(NRS)) {
				getLocation = "North";
			}
		}
		
		Alert eAlert = new Alert(Alert.AlertType.CONFIRMATION);
		eAlert.setHeaderText("Location Confirmation");
		eAlert.setContentText("Location has been set");
		eAlert.show();
	}
	
	public static String getLocation() {
		return getLocation;
	}
	
	
	@Override
	public void initialize(URL location, ResourceBundle resources){
		// TODO Auto-generated method stub
		int count = 0;
		
		
		try(Scanner in = new Scanner(file)){
			while(in.hasNextLine()) {
				locationArray.add(in.nextLine());
			}
		}
		catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		Collections.sort(locationArray);
		
		for(int i = 0; i < locationArray.size(); i++) {
			ObservableList<String> locations = FXCollections.observableArrayList(locationArray.get(i).toString());
			searchList.getItems().addAll(locations);
			
			searchList.setOnMouseClicked(new EventHandler<MouseEvent>() {
				public void handle(MouseEvent event) { 
						searchBar.setText(searchList.getSelectionModel().getSelectedItem().toString());
				}
			});

		}
		
	    searchBar.textProperty().addListener(
	            new ChangeListener() {
	                public void changed(ObservableValue observable, Object oldVal, Object newVal) {
	                    handleSearchByKey((String)oldVal, (String)newVal);
	                }
	    });
	}
}
