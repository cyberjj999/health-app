package healthApp.controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentNavigableMap;

import org.mapdb.DB;

import healthApp.data.FoodDB;
import healthApp.data.UsersFoodConsumptionDB;
import healthApp.data.UsersMapDB;
import healthApp.model.Food;
import healthApp.model.Users;
import healthApp.model.UsersFoodConsumption;
import javafx.application.Platform;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.stage.Stage;




public class selectedFoodController implements Initializable {
	/*
	private static final String CUSTOMER_DB ="usersData/users.db";
	private static final String USER_DB ="users";
	private DB db;
	private ConcurrentNavigableMap<String, Users> map;
	*/
	
	private static String loggedInUser;
	
	public String getLoggedInUser() {
		return loggedInUser;
	}



	public void setLoggedInUser(String loggedInUser) {
		this.loggedInUser = loggedInUser;
	}

	@FXML
	private Label foodNameLabel;
	@FXML
	private Label servingSizeLabel;
	@FXML
	private Label caloriesLabel;
	@FXML
	private Label proteinLabel;
	@FXML
	private Label carbsLabel;
	@FXML
	private Label descriptionLabel;
	@FXML
	private Label portionLabel;
    @FXML
    private ImageView foodImage;
	@FXML
	private Button addToConsumptionBtn;
	@FXML
	private Button minusPortionBtn;
	@FXML
	private Button addPortionBtn;
	@FXML
	private Label fatsLabel;
	@FXML
	private Label sodiumLabel;
	@FXML
	private Label sugarLabel;
	@FXML
	private Label cholesterolLabel;

    private Scene myScene;
    
	private int portion = 1;

	FoodDB foodDatabase = new FoodDB();
	//UsersMapDB userDatabase = new UsersMapDB();
	
	ArrayList <String> searchResultX = new ArrayList <String>();
	
	private String servingSizeUnit = "";
	private double servingSize= 0;
			
	private ImageView locationBtn;
	@FXML
	private ImageView reminderBtn;
	@FXML
	private ImageView exerciseBtn;
	@FXML
	private ImageView homeBtn;
	@FXML
	private ImageView foodBtn;
	@FXML
	private ImageView socialBtn;
   

@FXML
void goBack(MouseEvent event) throws IOException {

	FXMLLoader loader=new FXMLLoader();
	loader.setLocation((getClass().getResource("/healthApp/view/filteredSearchResult.fxml")));
	 myScene=(Scene)((Node)event.getSource()).getScene();
	 Stage stage=(Stage)(myScene).getWindow();
	 Parent nextView=loader.load();
	 stage.setScene(new Scene(nextView));
	 stage.show();
	 
	 filteredSearchResultController fSRC = loader.getController();
	 fSRC.setSearchResult(filteredSearchResultController.inputFoodX);
	
	 fSRC.addToVbox(fSRC.getSearchResultX());
	 
}

@FXML
	public void goLocation(MouseEvent event) throws IOException {

			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		// Event Listener on ImageView[#reminderBtn].onMouseClicked
		@FXML
		public void goReminder(MouseEvent event) throws IOException {
			// TODO Autogenerated
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		// Event Listener on ImageView[#exerciseBtn].onMouseClicked
		@FXML
		public void goExercise(MouseEvent event) throws IOException {
			// TODO Autogenerated
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		// Event Listener on ImageView[#homeBtn].onMouseClicked
		@FXML
		public void goHome(MouseEvent event) throws IOException {
			// TODO Autogenerated
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/HomepageView.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		// Event Listener on ImageView[#foodBtn].onMouseClicked
		@FXML
		public void goFood(MouseEvent event) throws IOException {
			// TODO Autogenerated
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		// Event Listener on ImageView[#socialBtn].onMouseClicked
		@FXML
		public void goSocial(MouseEvent event) throws IOException {
			// TODO Autogenerated
			FXMLLoader loader=new FXMLLoader();
			loader.setLocation((getClass().getResource("/healthApp/view/NutritionTrackingHomepage.fxml")));
			 myScene=(Scene)((Node)event.getSource()).getScene();
			 Stage stage=(Stage)(myScene).getWindow();
			 Parent nextView=loader.load();
			 stage.setScene(new Scene(nextView));
			 stage.show();
		}
		
		
	// Event Listener on Button[#addToConsumptionBtn].onAction
	@FXML
	public void addToConsumption(ActionEvent event) throws IOException {
		// TODO Autogenerated
	

		
			//Retrieve all users object
			//ArrayList <Users> allUsers = new ArrayList<Users>(UsersDB.getMap().values());
			//UsersMapDB UsersDB = new UsersMapDB();
			UsersFoodConsumptionDB UsersFoodDB = new UsersFoodConsumptionDB();
			
		
			
			
			//Retrieve from existing DB
			
			//Check for which user logged in here
			//Users user1 = UsersDB.getUsers("mailinput1");
			//Basically to know which user is which user
			//1) Get all users
			//2)Get all UsersFood
			
			//loop through both , if coincide , then use that particular userFood
			//if not found , create new userFood
			
			//If they dh a UserFood yet , create a new one
			
			
			/*here
			 *UsersMapDB usersDB = new UsersMapDB();
			 *	Users loggedInUser = UsersFoodDB.checkLoggedIn;
			 * if(UsersFoodDB.getUsers(loggedInUser.getEmail()==null){
			 * new UsersFoodConsumption(loggedInUser.getEmail(),new ArrayList <Food>(),new ArrayList <Integer>(),new ArrayList<String>())
			 * }
			 * 
			 * to here
			 */
			UsersMapDB usersDB = new UsersMapDB();
			Users loggedInUser = usersDB.checkLoggedIn(getLoggedInUser());
	
			

			
			//System.out.println(loggedInUser.getName());
			
			if(UsersFoodDB.getUsers(loggedInUser.getEmail())==null)
			UsersFoodDB.addUsersFood(new UsersFoodConsumption(loggedInUser.getEmail(),new ArrayList <Food>(),new ArrayList <Integer>(),new ArrayList<String>()));
			
			double calories = getCalories();
			double protein = getProtein();
			double carbs = getCarbs();
			double fats = getFats();
			double cholesterol = getCholesterol();
			double sugar = getSugar();
			double sodium = getSodium();
			String description = getDescription();
			double servingSize = getServingSize();
			String servingSizeUnit = getServingSizeUnit();
			int portion = getPortion();
			
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
			Date date = new Date();
			
			
			
			
			
			//Illness get from users here
			String illness = loggedInUser.getHealth();
			System.out.println(illness);
			//String illness = "Diabetes";
			//sugar > 30 = bad
			//cholesterol > 200 = bad
			String highSugarContent="";
			String highCholesterol="";
			
		   
    		Alert alert = new Alert(AlertType.CONFIRMATION);
    		alert.setTitle("Confirmation Dialog");
    		alert.setHeaderText("A Confirmation Dialog");
    		alert.setContentText("Are you sure?");
    		alert.setWidth(400);
    		alert.setHeight(200);
    		Optional<ButtonType> result = alert.showAndWait();
    		if (result.get() == ButtonType.OK){
    			
    			if(checkSugar(sugar)) {
    				highSugarContent="high in sugar";
    			}
    			
    			if(checkCholesterol(cholesterol)) {
    				highCholesterol="high in cholesterol";
    			}
    			System.out.println(illness.contains("Diabetes"));
    			if(illness.contains("Diabetes") && checkSugar(sugar) && illness.contains("Highbloodpressure") && checkCholesterol(cholesterol)) {
    				ButtonType backBtn = new ButtonType("Back", ButtonData.CANCEL_CLOSE);
    		    	ButtonType confirmBtn = new ButtonType("Confirm", ButtonData.NEXT_FORWARD);
    		    	Pane newPane = new Pane();
    		    
    		    	Label illnessLabel = new Label("Illness");
    		    	Label reasonLabel = new Label("Reason");
    		    	ImageView image1 = new ImageView();
    		    	image1.setFitWidth(130);
    		    	image1.setFitHeight(130);
    		    	loadProblemsImage("heartAttack.jpg",image1);
    		    	ImageView image2 = new ImageView();
    		    	image2.setFitWidth(130);
    		    	image2.setFitHeight(130);
    		    	loadProblemsImage("stroke.jpg",image2);
    		    	ImageView image3 = new ImageView();
    		    	image3.setFitWidth(130);
    		    	image3.setFitHeight(130);
    		    	loadProblemsImage("kidneyFailure.jpg",image3);
    		    	ImageView image4 = new ImageView();
    		    	image4.setFitWidth(130);
    		    	image4.setFitHeight(130);
    		    	loadProblemsImage("heartFailure.jpg",image4);
    		    	
    		    	
    		    	
    		    	illnessLabel.setText("You have " + illness);
    		    	reasonLabel.setText("Since the food you are consuming is " + highSugarContent + " and " + highCholesterol + " you would have"
    		    			+ " increased your risk of heart attack,stroke,kidney failure and heart failure!");
    		    	newPane.getChildren().add(illnessLabel);
    		    	newPane.getChildren().add(reasonLabel);
    		    	newPane.getChildren().add(image1);
    		    	newPane.getChildren().add(image2);
    		    	
    		    	image1.setLayoutX(40);
    		    	image1.setLayoutY(110);
    		    	image2.setLayoutX(145);
    		    	image2.setLayoutY(110);
    		    	image3.setLayoutX(250);
    		    	image3.setLayoutY(110);
    		    	image4.setLayoutX(355);
    		    	image4.setLayoutY(110);
    		    	illnessLabel.setLayoutX(40);
    		    	illnessLabel.setLayoutY(50);
    		    	reasonLabel.setLayoutX(40);
    		    	reasonLabel.setLayoutY(90);
    				
    				Alert alert3 = new Alert(AlertType.WARNING);
    		    	alert3.setTitle("Warning Dialog");
    		    	alert3.setHeaderText("The food you are consuming is not good for you!");
    		    	alert3.getButtonTypes().setAll(backBtn,confirmBtn);
    		    	alert3.setResizable(false);
    		    	alert3.setHeight(300);
    		    	alert3.setWidth(200);
    		    	alert3.getDialogPane().setContent(newPane);
    		    	
    		    	
    		    	Optional<ButtonType> result2 = alert3.showAndWait();
    		    	if(!result2.isPresent()) {
    		    		System.out.println("Never press any button");
    		    	}
    		    	else if(result2.get() == confirmBtn) {
    		    		//User press confirm
    		    		String foodName = foodNameLabel.getText();
            			//Create a new food based on this page's information
            			Food newFood = new Food(foodName,calories,protein,carbs,fats,sugar,sodium,cholesterol,servingSize,servingSizeUnit);
            			newFood.setDescription(description);
            			
            			//Create a "link" between user and food , db that corresponds to userDB and foodDB
            			UsersFoodConsumption UserFood1 = UsersFoodDB.getUsers(loggedInUser.getEmail());
            			//UserFood1.setUserID(user1.getEmail());
            			
            			//Retrieve userFood arraylist
            			//Add the food into the arraylist
            			//set the arraylist of the userFood to the updated arrayList with the added food
            			ArrayList <Food> FoodArrayList = UserFood1.getFoodArrayList();
            			ArrayList <Integer> PortionArrayList = UserFood1.getPortionArrayList();
            			ArrayList <String> DateArrayList = UserFood1.getDateArrayList();
            			DateArrayList.add(dateFormat.format(date).toString());
            			
            			
            			//Check time
            			System.out.print(dateFormat.format(date).toString());
            			//
            			
            			UserFood1.setDateArrayList(DateArrayList);
            			PortionArrayList.add(portion);
            			UserFood1.setPortionArrayList(PortionArrayList);
            			FoodArrayList.add(newFood);
            			UserFood1.setFoodArrayList(FoodArrayList);

            			UsersFoodDB.addUsersFood(UserFood1);
            		
            			System.out.println(FoodArrayList);
    		    		
    		    		}
    		    		
    		    	
    		    	else if(result2.get() == backBtn) {
    		    	    // cancel button is pressed
    		    		System.out.println("You clicked cancel");
    		    		
    		    	}
    				
    			}
    			
    			if(illness.contains("Highbloodpressure") && checkCholesterol(cholesterol)) {
    				ButtonType backBtn = new ButtonType("Back", ButtonData.CANCEL_CLOSE);
    		    	ButtonType confirmBtn = new ButtonType("Confirm", ButtonData.NEXT_FORWARD);
    		    	Pane newPane = new Pane();
    		    
    		    	Label illnessLabel = new Label("Illness");
    		    	Label reasonLabel = new Label("Reason");
    		    	ImageView image1 = new ImageView();
    		    	image1.setFitWidth(130);
    		    	image1.setFitHeight(130);
    		    	loadProblemsImage("kidneyFailure.jpg",image1);
    		    	ImageView image2 = new ImageView();
    		    	image2.setFitWidth(130);
    		    	image2.setFitHeight(130);
    		    	loadProblemsImage("heartFailure.jpg",image2);
    		    	
    		    	illnessLabel.setText("You have " + illness);
    		    	reasonLabel.setText("Since the food you are consuming is " + highCholesterol + " you would have"
    		    			+ " increased your risk of kidney and heart failure!");
    		    	newPane.getChildren().add(illnessLabel);
    		    	newPane.getChildren().add(reasonLabel);
    		    	newPane.getChildren().add(image1);
    		    	newPane.getChildren().add(image2);
    		    	
    		    	image1.setLayoutX(40);
    		    	image1.setLayoutY(110);
    		    	image2.setLayoutX(145);
    		    	image2.setLayoutY(110);
    		    	illnessLabel.setLayoutX(40);
    		    	illnessLabel.setLayoutY(50);
    		    	reasonLabel.setLayoutX(40);
    		    	reasonLabel.setLayoutY(90);
    				
    				Alert alert3 = new Alert(AlertType.WARNING);
    		    	alert3.setTitle("Warning Dialog");
    		    	alert3.setHeaderText("The food you are consuming is not good for you!");
    		    	alert3.getButtonTypes().setAll(backBtn,confirmBtn);
    		    	alert3.setResizable(false);
    		    	alert3.setHeight(300);
    		    	alert3.setWidth(200);
    		    	alert3.getDialogPane().setContent(newPane);
    		    	
    		    	
    		    	Optional<ButtonType> result2 = alert3.showAndWait();
    		    	if(!result2.isPresent()) {
    		    		System.out.println("Never press any button");
    		    	}
    		    	else if(result2.get() == confirmBtn) {
    		    		//User press confirm
    		    		String foodName = foodNameLabel.getText();
            			//Create a new food based on this page's information
            			Food newFood = new Food(foodName,calories,protein,carbs,fats,sugar,sodium,cholesterol,servingSize,servingSizeUnit);
            			newFood.setDescription(description);
            			
            			//Create a "link" between user and food , db that corresponds to userDB and foodDB
            			UsersFoodConsumption UserFood1 = UsersFoodDB.getUsers(loggedInUser.getEmail());
            			//UserFood1.setUserID(user1.getEmail());
            			
            			//Retrieve userFood arraylist
            			//Add the food into the arraylist
            			//set the arraylist of the userFood to the updated arrayList with the added food
            			ArrayList <Food> FoodArrayList = UserFood1.getFoodArrayList();
            			ArrayList <Integer> PortionArrayList = UserFood1.getPortionArrayList();
            			ArrayList <String> DateArrayList = UserFood1.getDateArrayList();
            			DateArrayList.add(dateFormat.format(date).toString());
            			
            			
            			//Check time
            			System.out.print(dateFormat.format(date).toString());
            			//
            			
            			UserFood1.setDateArrayList(DateArrayList);
            			PortionArrayList.add(portion);
            			UserFood1.setPortionArrayList(PortionArrayList);
            			FoodArrayList.add(newFood);
            			UserFood1.setFoodArrayList(FoodArrayList);

            			UsersFoodDB.addUsersFood(UserFood1);
            		
            			System.out.println(FoodArrayList);
    		    		
    		    		}
    		    		
    		    	
    		    	else if(result2.get() == backBtn) {
    		    	    // cancel button is pressed
    		    		System.out.println("You clicked cancel");
    		    		
    		    	}
    			}
    			
    			if(illness.contains("Diabetes") && checkSugar(sugar)) {
    				ButtonType backBtn = new ButtonType("Back", ButtonData.CANCEL_CLOSE);
    		    	ButtonType confirmBtn = new ButtonType("Confirm", ButtonData.NEXT_FORWARD);
    		    	Pane newPane = new Pane();
    		    
    		    	Label illnessLabel = new Label("Illness");
    		    	Label reasonLabel = new Label("Reason");
    		    	ImageView image1 = new ImageView();
    		    	image1.setFitWidth(130);
    		    	image1.setFitHeight(130);
    		    	loadProblemsImage("heartAttack.jpg",image1);
    		    	ImageView image2 = new ImageView();
    		    	image2.setFitWidth(130);
    		    	image2.setFitHeight(130);
    		    	loadProblemsImage("stroke.jpg",image2);
    		    	
    		    	illnessLabel.setText("You have " + illness);
    		    	reasonLabel.setText("Since the food you are consuming is " + highSugarContent + " you would have"
    		    			+ " increased your risk of heart attack and stroke");
    		    	newPane.getChildren().add(illnessLabel);
    		    	newPane.getChildren().add(reasonLabel);
    		    	newPane.getChildren().add(image1);
    		    	newPane.getChildren().add(image2);
    		    	
    		    	image1.setLayoutX(40);
    		    	image1.setLayoutY(110);
    		    	image2.setLayoutX(145);
    		    	image2.setLayoutY(110);
    		    	illnessLabel.setLayoutX(40);
    		    	illnessLabel.setLayoutY(50);
    		    	reasonLabel.setLayoutX(40);
    		    	reasonLabel.setLayoutY(90);
    				
    				Alert alert3 = new Alert(AlertType.WARNING);
    		    	alert3.setTitle("Warning Dialog");
    		    	alert3.setHeaderText("The food you are consuming is not good for you!");
    		    	alert3.getButtonTypes().setAll(backBtn,confirmBtn);
    		    	alert3.setResizable(false);
    		    	alert3.setHeight(300);
    		    	alert3.setWidth(200);
    		    	alert3.getDialogPane().setContent(newPane);
    		    	
    		    	
    		    	Optional<ButtonType> result2 = alert3.showAndWait();
    		    	if(!result2.isPresent()) {
    		    		System.out.println("Never press any button");
    		    	}
    		    	else if(result2.get() == confirmBtn) {
    		    		//User press confirm
    		    		String foodName = foodNameLabel.getText();
            			//Create a new food based on this page's information
            			Food newFood = new Food(foodName,calories,protein,carbs,fats,sugar,sodium,cholesterol,servingSize,servingSizeUnit);
            			newFood.setDescription(description);
            			
            			//Create a "link" between user and food , db that corresponds to userDB and foodDB
            			UsersFoodConsumption UserFood1 = UsersFoodDB.getUsers(loggedInUser.getEmail());
            			//UserFood1.setUserID(user1.getEmail());
            			
            			//Retrieve userFood arraylist
            			//Add the food into the arraylist
            			//set the arraylist of the userFood to the updated arrayList with the added food
            			ArrayList <Food> FoodArrayList = UserFood1.getFoodArrayList();
            			ArrayList <Integer> PortionArrayList = UserFood1.getPortionArrayList();
            			ArrayList <String> DateArrayList = UserFood1.getDateArrayList();
            			DateArrayList.add(dateFormat.format(date).toString());
            			
            			
            			//Check time
            			System.out.print(dateFormat.format(date).toString());
            			//
            			
            			UserFood1.setDateArrayList(DateArrayList);
            			PortionArrayList.add(portion);
            			UserFood1.setPortionArrayList(PortionArrayList);
            			FoodArrayList.add(newFood);
            			UserFood1.setFoodArrayList(FoodArrayList);

            			UsersFoodDB.addUsersFood(UserFood1);
            		
            			System.out.println(FoodArrayList);
    		    		
    		    		}
    		    		
    		    	
    		    	else if(result2.get() == backBtn) {
    		    	    // cancel button is pressed
    		    		System.out.println("You clicked cancel");
    		    		
    		    	}
    		    	
    			}
    			
    			
    			else {
    				String foodName = foodNameLabel.getText();
        			//Create a new food based on this page's information
        			Food newFood = new Food(foodName,calories,protein,carbs,fats,sugar,sodium,cholesterol,servingSize,servingSizeUnit);
        			newFood.setDescription(description);
        		
        			
        			//Create a "link" between user and food , db that corresponds to userDB and foodDB
        			UsersFoodConsumption UserFood1 = UsersFoodDB.getUsers(loggedInUser.getEmail());
        			//UserFood1.setUserID(user1.getEmail());
        			
        			//Retrieve userFood arraylist
        			//Add the food into the arraylist
        			//set the arraylist of the userFood to the updated arrayList with the added food
        			ArrayList <Food> FoodArrayList = UserFood1.getFoodArrayList();
        			ArrayList <Integer> PortionArrayList = UserFood1.getPortionArrayList();
        			ArrayList <String> DateArrayList = UserFood1.getDateArrayList();
        			
        			DateArrayList.add(dateFormat.format(date).toString());
        			
        			//Check time
        			System.out.print(dateFormat.format(date).toString());
        			//

        			UserFood1.setDateArrayList(DateArrayList);
        			PortionArrayList.add(portion);
        			UserFood1.setPortionArrayList(PortionArrayList);
        			FoodArrayList.add(newFood);
        			UserFood1.setFoodArrayList(FoodArrayList);
        			
        			UsersFoodDB.addUsersFood(UserFood1);
        			System.out.println(FoodArrayList);
        			
        			
        			
    				
    				
    				
    			}
    		    	
    			
    			
    			
    		
    		}
    			else {
    			    // ... user chose CANCEL or closed the dialog
    			}
    			
    		
		
		
				
				
			}
			
		
	
	// Event Listener on Button[#minusPortionBtn].onAction
	@FXML
	public void minusPortion(ActionEvent event) {
		portion--;
		portionLabel.setText("Portion:" + portion);
		if (portion<2) {
			minusPortionBtn.setDisable(true);
		}
		ArrayList <Food> allFood = new ArrayList<Food>(foodDatabase.getMap().values());
		String foodName = foodNameLabel.getText();
		
		for(Food foodObject : allFood) {
			if (foodName.equals(foodObject.getName())) {
				setDescription(foodObject.getDescription());
				setServingSize(foodObject.getServingSize() * portion,foodObject.getServingSizeUnit());
				setCalories(foodObject.getCalories()* portion);
				setProtein(foodObject.getProtein()* portion);
				setCarbs(foodObject.getCarbs()* portion);
				setFats(foodObject.getFats()* portion);
				setSodium(foodObject.getSodium()* portion);
				setCholesterol(foodObject.getCholesterol()* portion);
				setSugar(foodObject.getSugar() * portion);
				
			}
		}
		
		

	}
	// Event Listener on Button[#addPortionBtn].onAction
	@FXML
	public void addPortion(ActionEvent event) {
		portion++;
		portionLabel.setText("Portion:" + portion);
		if(portion>1) {
			minusPortionBtn.setDisable(false);
		}
		
		ArrayList <Food> allFood = new ArrayList<Food>(foodDatabase.getMap().values());
		String foodName = foodNameLabel.getText();
		
		for(Food foodObject : allFood) {
			if (foodName.equals(foodObject.getName())) {
				setDescription(foodObject.getDescription());
				setServingSize(foodObject.getServingSize() * portion,foodObject.getServingSizeUnit());
				setCalories(foodObject.getCalories()* portion);
				setProtein(foodObject.getProtein()* portion);
				setCarbs(foodObject.getCarbs()* portion);
				setFats(foodObject.getFats()* portion);
				setSodium(foodObject.getSodium()* portion);
				setCholesterol(foodObject.getCholesterol()* portion);
				setSugar(foodObject.getSugar() * portion);
				
			}
		}


	}
	
	
	public void loadImage(String foodName) {
		
		String fileName;
		switch (foodName) {
			
		case "Chicken Rice" :  fileName = "animeChickenRice.jpg";
		break;
		
		case "Chicken Soup(KFC)" : fileName = "animeChickenSoup.jpg";
		break;
		
		case "Fried Chicken" : fileName = "animeFriedChicken.jpg";
		break;
		
		case "Salad" : fileName = "salad.jpg";
		break;
		
		case "Chocolate" : fileName = "chocolate.jpg";
		break;
	
		case "Nasi Lemak" : fileName = "nasiLemak.jpg";
		break;
		
		default: fileName = "foodNotFound.jpg";
		break;
		
			
		}
		

		Path dPath = FileSystems.getDefault().getPath("foodImg",fileName);
		File foodImg = new File(dPath.toUri());
	
		Image image = new Image(foodImg.toURI().toString());
		foodImage.setImage(image);
		
	}
	
	public void loadProblemsImage(String problemImage, ImageView imageX) {
		
		
		Path dPath = FileSystems.getDefault().getPath("foodImg",problemImage);
		File problemImg = new File(dPath.toUri());
	
		Image image = new Image(problemImg.toURI().toString());
		imageX.setImage(image);
		
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		
		// TODO Auto-generated method stub
		
		loadImage(foodNameLabel.getText());
		
		descriptionLabel.setMaxWidth(138);
		descriptionLabel.setWrapText(true);
		portionLabel.setText("Portion: " + portion);
		if (portion<2) {
			minusPortionBtn.setDisable(true);
		}
		
		addPortionBtn.setStyle("-fx-border-color: #17202A; -fx-border-width: 3px;-fx-background-color:pink;");
		minusPortionBtn.setStyle("-fx-border-color: #17202A; -fx-border-width: 3px;-fx-background-color:pink;");
		addToConsumptionBtn.setStyle("-fx-border-color: #17202A; -fx-border-width: 3px;-fx-background-color:pink;");
	
	}

    
    public void setPortion(int portion) {
    	portionLabel.setText("Portion: " + Integer.toString(portion));
    }

	public void setFoodName(String foodName) {
		foodNameLabel.setText(foodName);
		
	}
	
	public void setDescription(String description) {
		descriptionLabel.setText("Description:" + description);
		
	}
	public void setServingSize(double servingSize ,String servingSizeUnit) {
		servingSizeLabel.setText("Serving size: " + servingSize + " " + servingSizeUnit);
		setServingSizeUnit(servingSizeUnit);
		setServingSize(servingSize);
		
	}
	public void setCalories(double calories) {
		caloriesLabel.setText("Calories: " + Double.toString(calories) + "kcal");
		
	}
	public void setProtein(double protein) {
		proteinLabel.setText("Protein: " + Double.toString(protein) + "g");
		
	}
	public void setCarbs(double carbs) {
		carbsLabel.setText("Carbs: " + Double.toString(carbs) + "g");
	}
	public void setFats(double fats) {
		fatsLabel.setText("Fats: " + Double.toString(fats) + "g");
	}
	
	public void setSodium(double sodium) {
		sodiumLabel.setText("Sodium: " + Double.toString(sodium) + "mg");
	}
	
	public void setCholesterol(double cholesterol) {
		cholesterolLabel.setText("Cholesterol: " + Double.toString(cholesterol) + "mmol//L");
	}
	
	public void setSugar(double sugar) {
		sugarLabel.setText("Sugar: " + Double.toString(sugar) + "g");
	}
	

	
	public void setServingSizeUnit(String servingSizeUnitX) {
		this.servingSizeUnit = servingSizeUnitX;
	}
	
	public String getServingSizeUnit() {
		return servingSizeUnit;
	}
	
	public void setServingSize(double servingSizeX) {
		this.servingSize = servingSizeX;
	}
	
	public double getServingSize() {
		return servingSize;
	}
	
	public double getCalories() {
		String string1 = caloriesLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double caloriesValue = Double.parseDouble(newString2.trim()); 
		return caloriesValue;
		
	}
	
	public double getProtein() {
		String string1 = proteinLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double proteinValue = Double.parseDouble(newString2.trim()); 
		return proteinValue;
		
	}
	public double getCarbs() {
		String string1 = carbsLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double carbsValue = Double.parseDouble(newString2.trim()); 
		return carbsValue;
		
	}
	public double getFats() {
		String string1 = fatsLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double fatsValue = Double.parseDouble(newString2.trim()); 
		return fatsValue;
		
	}
	public double getSodium() {
		String string1 = sodiumLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double sodiumValue = Double.parseDouble(newString2.trim()); 
		return sodiumValue;
		
	}
	public double getCholesterol() {
		String string1 = cholesterolLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		String newString3 = newString2.replace("/", "");
		double cholesterolValue = Double.parseDouble(newString3.trim()); 
		return cholesterolValue;
		
	}
	public double getSugar() {
		String string1 = sugarLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		double sugarValue = Double.parseDouble(newString2.trim()); 
		return sugarValue;
		
	}
	
	public String getDescription() {
		return descriptionLabel.getText();
	}
	
	public int getPortion() {
		String string1 = portionLabel.getText();
		String newString = string1.replaceAll("[[a-zA-Z]+]", "");
		String newString2 = newString.replaceAll(":", "");
		int portionValue = Integer.parseInt(newString2.trim()); 
		return portionValue;
	}
	
	
	public void collapseDescription() {
		String description = descriptionLabel.getText();
		int descriptionLength = description.length();
		//if ()
		
	}
	
	
	
	
	//public ConcurrentNavigableMap<String, Users> getMap(){
	//	return map;
		//}
	
	
	public void setSearchResultX(ArrayList <String> searchResult){
		this.searchResultX = searchResult;
	}
	
	public boolean checkSugar(double sugar) {
		boolean result = false;
		if(sugar>=30) {
			result = true;
		}
		return result;
	}
	
	public boolean checkCholesterol(double cholesterol) {
		boolean result = false;
		if(cholesterol >= 200) {
			result = true;
		}
		return result;
	}
	
	
	
	public Users checkLoggedIn(String mail) {
		UsersMapDB userDB = new UsersMapDB();
		
		Login loginClass = new Login();
		Users loggedInUser = null;
		ArrayList <Users> allUsers = new ArrayList<Users>(userDB.getMap().values());
		for(Users user : allUsers) {
			if(mail.equals(user.getEmail()))
			{
				System.out.println("Yes it is logged in");
				loggedInUser = user;
			}
			
		}
		
		return loggedInUser;
		
	}
	
	
}
