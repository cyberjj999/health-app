package healthApp.controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;

import javafx.scene.image.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.FileSystems;
import java.util.ArrayList;
import java.util.Optional;
import java.util.ResourceBundle;

import javax.imageio.ImageIO;

import healthApp.data.FoodDB;
import healthApp.model.Food;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.control.CheckBox;

public class AdminFoodAddController implements Initializable{
	@FXML
	private Button backBtn;
	@FXML
	private TextField foodTextField;
	@FXML
	private TextArea descriptionTextArea;
	@FXML
	private TextField caloriesTextField;
	@FXML
	private TextField proteinTextField;
	@FXML
	private TextField carbsTextField;
	@FXML
	private TextField fatsTextField;
	@FXML
	private TextField sugarTextField;
	@FXML
	private TextField sodiumTextField;
	@FXML
	private TextField cholesterolTextField;
	@FXML
	private TextField servingSizeTextField;
	@FXML
	private TextField servingSizeUnitTextField;
	@FXML
	private CheckBox meatCheckBox;
	@FXML
	private CheckBox breadAndCerealCheckBox;
	@FXML
	private CheckBox milkCheckBox;
	@FXML
	private CheckBox fruitsAndVegetablesCheckBox;
	@FXML
	private CheckBox rootVegetablesCheckBox;
	@FXML
	private CheckBox breadCheckBox;
	@FXML
	private CheckBox iceCreamCheckBox;
	@FXML
	private CheckBox beefCheckBox;
	@FXML
	private CheckBox porkCheckBox;
	@FXML
	private CheckBox citrusFruitCheckBox;
	@FXML
	private CheckBox herbageVegetablesCheckBox;
	@FXML
	private CheckBox berriesCheckBox;
	@FXML
	private CheckBox cheeseCheckBox;
	@FXML
	private CheckBox wholeMilkCheckBox;
	@FXML
	private CheckBox chickenCheckBox;
	@FXML
	private CheckBox fishCheckBox;
	@FXML
	private CheckBox riceCheckBox;
	@FXML
	private CheckBox oatCheckBox;
	@FXML
	private CheckBox noodlesCheckBox;
	@FXML
	private Button addBtn;
    @FXML
    private Button chooseFileBtn;
    @FXML
    private TextArea imageTextArea;
    @FXML
    private ImageView imageHolder;
    
    @FXML
    private TextField fileName;
	
    private File selectedFile = null;
    
    public void setFile(File file) {
    	this.selectedFile = file;
    }
	// Event Listener on Button[#backBtn].onAction
	@FXML
	public void goBack(ActionEvent event) throws IOException {
		// TODO Autogenerated
		
		
	}
	// Event Listener on Button[#addBtn].onAction
	@FXML
	public void addToDatabase(ActionEvent event) throws IOException {
		FoodDB foodDatabase = new FoodDB();
		ArrayList <Food> allFood = new ArrayList<Food>(foodDatabase.getMap().values());
	
				//check if admin did not enter anything
					if(foodTextField.getText().trim().isEmpty() || foodTextField.getText()==null
							|| caloriesTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| proteinTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| carbsTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| fatsTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| sugarTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| sodiumTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| cholesterolTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| servingSizeTextField.getText().isEmpty() || caloriesTextField.getText()==null
							|| servingSizeUnitTextField.getText().isEmpty() || servingSizeUnitTextField.getText()==null
							|| descriptionTextArea.getText().isEmpty() || descriptionTextArea.getText()==null
							) {
				showAlert("Missing information","Please fill in every parts required");
					}
					
					
					else if(checkDuplicate(allFood,foodTextField.getText())) {
							showAlert("Error! Duplicate food!","Please enter alternative name instead!");
						}
					 

					
		
				//calories ,protein all these cannot have letters
					else if( !(caloriesTextField.getText().matches("[0-9]+")) 
					||!(proteinTextField.getText().matches("[0-9]+"))
					||!(carbsTextField.getText().matches("[0-9]+"))
					||!(fatsTextField.getText().matches("[0-9]+"))
					||!(sugarTextField.getText().matches("[0-9]+"))
					||!(sodiumTextField.getText().matches("[0-9]+"))
					||!(cholesterolTextField.getText().matches("[0-9]+"))
					||!(servingSizeTextField.getText().matches("[0-9]+"))
		
						) {
					showAlert("Input Error!","Please enter numbers for the nutritional information instead!");
				}
				
				//serving size unit cannot have letters
				else if(!(servingSizeUnitTextField.getText().matches("[a-zA-Z]+"))) {
					showAlert("Input Error!", "Please enter letters for the serving size instead!");
				}
				

				else {
					
					Alert alert = new Alert(AlertType.CONFIRMATION);
					alert.setTitle("Confirmation Dialog");
					alert.setHeaderText("Please double check the input value!");
					alert.setContentText("Confirm?");

					Optional<ButtonType> result = alert.showAndWait();
					if (result.get() == ButtonType.OK){
					    // ... user chose OK
						Food newFood = new Food();
						newFood.setName(foodTextField.getText());
						newFood.setCalories(Double.parseDouble(caloriesTextField.getText()));
						newFood.setProtein(Double.parseDouble(proteinTextField.getText()));
						newFood.setCarbs(Double.parseDouble(carbsTextField.getText()));
						newFood.setFats(Double.parseDouble(fatsTextField.getText()));
						newFood.setSugar(Double.parseDouble(sugarTextField.getText()));
						newFood.setSodium(Double.parseDouble(sodiumTextField.getText()));
						newFood.setCholesterol(Double.parseDouble(cholesterolTextField.getText()));
						newFood.setServingSize(Double.parseDouble(servingSizeTextField.getText()));
						newFood.setServingSizeUnit(servingSizeUnitTextField.getText());
						newFood.setDescription(descriptionTextArea.getText());
						
							String category="";
							
							if(meatCheckBox.isSelected()) {
								String word1 = "MEAT";
								category+=word1;
							}
							if(chickenCheckBox.isSelected()) {
								String word2 = "Chicken";
								category+=word2;
										}
							if(porkCheckBox.isSelected()) {
								String word3 = "Pork";
								category+=word3;
							}
							if(fishCheckBox.isSelected()) {
								String word4 = "Fish";
								category+=word4;
							}
							if(beefCheckBox.isSelected()) {
								String word5 = "Beef";
								category+=word5;
							}
							if(milkCheckBox.isSelected()) {
								String word6 = "MILK";
								category+=word6;
							}
							if(wholeMilkCheckBox.isSelected()) {
								String word7 = "WholeMilk";
								category+=word7;
							}
							if(iceCreamCheckBox.isSelected()) {
								String word8 = "IceCream";
								category+=word8;
							}
							if(cheeseCheckBox.isSelected()) {
								String word9 = "Cheese";
								category+=word9;
							}
							if(fruitsAndVegetablesCheckBox.isSelected()) {
								String word10 = "FruitsAndVegetables";
								category+=word10;
							}
							if(berriesCheckBox.isSelected()) {
								String word11 = "Berries";
								category+=word11;
							}
							if(citrusFruitCheckBox.isSelected()) {
								String word12 = "CitrusFruit";
								category+=word12;
							}
							if(herbageVegetablesCheckBox.isSelected()) {
								String word13 = "HerbageVegetables";
								category+=word13;
							}
							if(rootVegetablesCheckBox.isSelected()) {
								String word14 = "RootVegetables";	
								category+=word14;
							}
							if(breadCheckBox.isSelected()) {
								String word15 = "Bread";
								category+=word15;
							}
							if(oatCheckBox.isSelected()) {
								String word16 = "Oat";
								category+=word16;
							}
							if(riceCheckBox.isSelected()) {
								String word17 = "Rice";
								category+=word17;
							}
							if(noodlesCheckBox.isSelected()) {
								String word18 = "Noodles";
								category+=word18;
							}
							
							//
							BufferedImage img = null;
							//use for file testing first
							String imageName = selectedFile.getName();
							if (selectedFile!=null) {
								 //selectedFile.renameTo(new File("foodImg/selectedFile.jpeg"));
								
								
						        	  img = ImageIO.read(selectedFile);
						        	  File outputfile = new File("foodImg/" + imageName);
						        	  ImageIO.write(img, "jpeg", outputfile);
						        	  
						        	  //For both method , CANNOT replace current file
						        	  //eg if i alr have a ChickenRice.jpg
						        	  //it cannot replace ChickenRice.jpg
							}
							
							else {
								System.out.println("Error!Selected file is null idk why");
							}
							//
							
							
						newFood.setCategory(category);
						Alert alert2 = new Alert(AlertType.INFORMATION);
						alert2.setTitle("Successful!");
						alert2.setHeaderText("Food is successfully added");
						alert2.setContentText("The food has been added into the food database");

						alert2.showAndWait();
							
						
						foodDatabase.addFood(newFood);
						
						foodTextField.clear();
						descriptionTextArea.clear();
						caloriesTextField.clear();
						proteinTextField.clear();
						carbsTextField.clear();
						fatsTextField.clear();
						sugarTextField.clear();
						sodiumTextField.clear();
						cholesterolTextField.clear();
						servingSizeTextField.clear();
						servingSizeUnitTextField.clear();
						fileName.clear();
						imageHolder.setImage(null);
						
						meatCheckBox.setSelected(false);
						 breadAndCerealCheckBox.setSelected(false);
						 
						  milkCheckBox.setSelected(false);
						 
						  fruitsAndVegetablesCheckBox.setSelected(false);
						 
						  rootVegetablesCheckBox.setSelected(false);
						 
						  breadCheckBox.setSelected(false);
						 
						  iceCreamCheckBox.setSelected(false);
						 
						  beefCheckBox.setSelected(false);
						 
						  porkCheckBox.setSelected(false);
						 
						  citrusFruitCheckBox.setSelected(false);
						 
						  herbageVegetablesCheckBox.setSelected(false);
						 
						  berriesCheckBox.setSelected(false);
						 
						  cheeseCheckBox.setSelected(false);
						 
						  wholeMilkCheckBox.setSelected(false);
						 
						  chickenCheckBox.setSelected(false);
						 
						  fishCheckBox.setSelected(false);
						 
						  riceCheckBox.setSelected(false);
						 
						  oatCheckBox.setSelected(false);
						 
						  noodlesCheckBox.setSelected(false);
						  
						System.out.print(allFood);

					} else {
					    // ... user chose CANCEL or closed the dialog
						System.out.println("Exited!!");
					}
		
			
			
			
			
				}
	}
	
	
	
	public void showAlert(String title,String content) {
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle(title);
		alert.setHeaderText("Error!");
		alert.setContentText(content);

		alert.showAndWait();
	}
	
	public boolean checkDuplicate(ArrayList <Food> FoodArrayList , String foodName) {
		boolean result = true;
		ArrayList <String> foodNameArrayList = new ArrayList <String>();
		for(Food foodItems : FoodArrayList) {
			foodNameArrayList.add(foodItems.getName());
		}	
			if(foodNameArrayList.contains(foodName))
				result = true;
			else
				result = false;
		
	
		return result;
	}
	
	
	 @FXML
	    void chooseFile(ActionEvent event) throws IOException {
		 FileChooser.ExtensionFilter imageFilter
		    = new FileChooser.ExtensionFilter("Image Files", "*.jpg", "*.png");
		 FileChooser fc = new FileChooser();
		 fc.getExtensionFilters().add(imageFilter);
		 //Filter to ONLY jpg or png files
		 //so can only have images
		 	BufferedImage img = null;
		   File selectedFile = fc.showOpenDialog(null);
		   
		   
           if (selectedFile != null) {
        	  // selectedFile.renameTo(new File("foodImg/selectedFile.jpeg"));
        	  // img = ImageIO.read(selectedFile);
        	 // File outputfile = new File("foodImg/test.jpeg");
        	 // ImageIO.write(img, "jpeg", outputfile);

        	  
        	   /*
        	   Image img = ImageIO.read(selectedFile);
				
               
               //The folder to add is probably "foodImg" only
               ImageIO.write(SwingFXUtils.toFXImage(img,
                       null), "jpg", selectedFile);
               */
        	   FoodDB FoodDatabase = new FoodDB();
        
        	   fileName.setText(selectedFile.getName());
        	   setFile(selectedFile);
        	   //Image imageX = new Image(getClass().getResourceAsStream("foodImg")+ FoodDatabase.addFood(f).toString();
        	   
        	   BufferedImage imgHold = ImageIO.read(selectedFile);
        	   Image imageHold = SwingFXUtils.toFXImage(imgHold, null);
        	   //Image imageHold = new Image(selectedFile.toURI().toString());
        	   //imageHolder.
       		   imageHolder.setImage(imageHold);
       		   
        	   
       			/*
       			 * 
       			 * File foodImg = new File(dPath.toUri());
	
		Image image = new Image(foodImg.toURI().toString());
		foodImage.setImage(image);
       			 */
	    }
           
           else {
        	   System.out.println("Invalid file");
           }
}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		
		
	}
	 
}


//Null issue solved
