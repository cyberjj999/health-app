package healthApp.controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.control.Alert.AlertType;

import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.ResourceBundle;

import healthApp.data.AdminMessageDB;
import healthApp.data.UsersMapDB;
import healthApp.data.UsersMessageDB;
import healthApp.model.AdminMessage;
import healthApp.model.Users;
import healthApp.model.UsersMessage;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;


public class AdminMessageInboxDetailsController implements Initializable{
	
	private static String loggedInUser;
	
	public String getLoggedInUser() {
		return loggedInUser;
	}



	public void setLoggedInUser(String loggedInUser) {
		this.loggedInUser = loggedInUser;
	}
	@FXML
	private TextField nameTextField;
	@FXML
	private TextField emailTextField;
	@FXML
	private TextField ageTextField;
	@FXML
	private TextField experienceTextField;
	@FXML
	private TextField categoryTextField;
	@FXML
	private TextArea feedbackTextArea;

	@FXML
	private TextArea responseTextArea;
	@FXML
	private Button sendBtn;
    @FXML
    private Label dateLabel;
    @FXML
    private ImageView userimage;
	
    private CheckBox checkThing;
    
    public void setImage(Image img) {
    	this.userimage.setImage(img);
    }
    
   
    
    
	public CheckBox getCheckThing() {
		return checkThing;
	}


	public void setCheckThing(CheckBox checkThing) {
		this.checkThing = checkThing;
	}


	public TextField getNameTextField() {
		return nameTextField;
	}


	public void setNameTextField(String nameTextField) {
		this.nameTextField.setText(nameTextField);
	}


	public TextField getEmailTextField() {
		return emailTextField;
	}


	public void setEmailTextField(String emailTextField) {
		this.emailTextField.setText(emailTextField);
	}


	public TextField getAgeTextField() {
		return ageTextField;
	}


	public void setAgeTextField(String ageTextField) {
		this.ageTextField.setText(ageTextField);
	}


	public TextField getExperienceTextField() {
		return experienceTextField;
	}


	public void setExperienceTextField(String experienceTextField) {
		this.experienceTextField.setText(experienceTextField);
	}


	public TextField getCategoryTextField() {
		return categoryTextField;
	}


	public void setCategoryTextField(String categoryTextField) {
		this.categoryTextField.setText(categoryTextField);
	}


	public TextArea getFeedbackTextArea() {
		return feedbackTextArea;
	}


	public void setFeedbackTextArea(String feedbackTextArea) {
		this.feedbackTextArea.setText(feedbackTextArea);
	}

	public Label getDateLabel() {
		return dateLabel;
	}


	public void setDateLabel(String dateLabel) {
		this.dateLabel.setText("Sent on : " + dateLabel);
	}


	// Event Listener on Button[#sendBtn].onAction
	@FXML
	public void sendMsg(ActionEvent event) {
		// TODO Autogenerated
		if(responseTextArea.getText().trim().isEmpty()) {
			showAlert("Error in submission" , "Response submission cannot be blank!");
		}
			
		else {
			
			//Replace the usermessage here 
			//upon submitting the message
			//UsersMessage thisUserZ;
			
			/*
			UsersMessage newUser = umDB.getUsersMessage("User1");
			String msgX = feedbackTextArea.getText();
			ArrayList <UsersMessage> allUsers = new ArrayList<UsersMessage>(umDB.getMap().values());
			for (UsersMessage thisUser : allUsers) {
				if (thisUser.getMessageTV().equals(msgX)) {
					thisUserZ = thisUser;
				}
			}
			
			
			ArrayList <String> newIsCheck = newUser.getIsChecked();
			newIsCheck.add("Checked");
			System.out.println(newIsCheck);
			newUser.setIsChecked(newIsCheck);
			umDB.updateArrayList(newUser);
			
			
			 
			 */
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
			Date date = new Date();
			String dateString = dateFormat.format(date).toString();
			//link user to this shit here
			String msg = responseTextArea.getText();
			AdminMessageDB AdminMsgDB = new AdminMessageDB();
		
			String UserEmail = emailTextField.getText();
			
			/*
	if(UsersMsgDB.getUsersMessage("User1")==null)
    				UsersMsgDB.addUsersMessage(new UsersMessage("User1",new ArrayList <String>(),new ArrayList <String>(),new ArrayList <String>(),new ArrayList<String>()));
    			
    			//String name = User.getName();
    			UsersMessage UserMessage1 = UsersMsgDB.getUsersMessage("User1");

    			ArrayList <String> message = UserMessage1.getMessage();
    			ArrayList <String> experience = UserMessage1.getExperience();
    			ArrayList <String> categoryAL = UserMessage1.getCategory();
    			ArrayList <String> DateArrayList = UserMessage1.getDate();    			
			 */
			UsersMapDB usersDB = new UsersMapDB();
			//Users loggedInUser = usersDB.checkLoggedIn(getLoggedInUser());
			//System.out.println("The logged in User is " + loggedInUser.getName());
			//ystem.out.println("The email of the logged in User is : " + getLoggedInUser());
			
			if(AdminMsgDB.getAdminMessage(UserEmail)== null) {
				AdminMessage testAM = new AdminMessage(UserEmail,new ArrayList <String>(),new ArrayList<String>());
			
				AdminMsgDB.addAdminMessage(testAM);
				

			}
				//AdminMsgDB.addAdminMessage(new AdminMessage("User1",new ArrayList <String>(),new ArrayList <String>()));
		
			

			AdminMessage admin1 = AdminMsgDB.getAdminMessage(UserEmail);
			ArrayList <String> DateArrayList = admin1.getDateAL();
			ArrayList <String> messageArrayList = admin1.getMessageAL();
			DateArrayList.add(dateString);
			messageArrayList.add(msg);
			
			admin1.setDateAL(DateArrayList);
			admin1.setMessageAL(messageArrayList);
			
			
			AdminMsgDB.updateMap(admin1);
			
			
			
			
			
			showAlert2();
			
			CheckBox firstClassCB = getCheckThing();
			firstClassCB.setSelected(true);
			
			
			
		}
		
	}


	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		
		
		
	}
	
	public void showAlert(String title,String content) {
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle(title);
		alert.setHeaderText("Error!");
		alert.setContentText(content);

		alert.showAndWait();
	}
	
	public void showAlert2() {
		Alert alert2 = new Alert(AlertType.INFORMATION);
		alert2.setTitle("Successful!");
		alert2.setHeaderText("Message sent successfully");
		alert2.setContentText("The message has been sent to the user");

		alert2.showAndWait();
	}
	
	
	public ArrayList <AdminMessage> createNewAdminObjects() {
		
		//	public UsersMessage(String UserID,String experienceTV,String categoryTV,String messageTV,String dateTV) {
		//public UsersMessage(String userID,ArrayList<String> message,ArrayList <String> experinece, ArrayList <String> category,ArrayList <String> date){
		
		UsersMapDB usersDB = new UsersMapDB();
		ArrayList <Users> allUsers = new ArrayList<Users>(usersDB.getMap().values());
		AdminMessageDB AdminMsgDB = new AdminMessageDB();
		ArrayList <AdminMessage> allAdminMsg = new ArrayList<AdminMessage>(AdminMsgDB.getMap().values());

		ArrayList <AdminMessage> AdminMessageAL = new ArrayList <AdminMessage>();


		for(Users u : allUsers) {
			//check if users has a message - inside usersMsgDB
			//if they never send , means dh , so no need to create
			if(AdminMsgDB.getAdminMessage(u.getEmail())==null){
				
			}
			
			//that particular user has a msg , or two or more
			//here alr selected that FIRST user or SECOND user
			//now its just to retrieve it based on its email
			else {
				//for(UsersMessage uMsg : UsersMsgDB.getUsersMessage(u.getEmail()).getMessage())  {
				//UsersMessage UserMessageAL = new UsersMessage();
					ArrayList <String> message = AdminMsgDB.getAdminMessage(u.getEmail()).getMessageAL();
					ArrayList <String> date = AdminMsgDB.getAdminMessage(u.getEmail()).getDateAL();
					
					
						for (int i=0;i<message.size();i++) {	
						
					AdminMessage newAdmin = new AdminMessage(u.getEmail(),message.get(i),date.get(i));
				
					AdminMessageAL.add(newAdmin);
						
						}	
				
					}
			
			}
		return AdminMessageAL;

		}
	
		
		/*
		Users loggedInUser = usersDB.checkLoggedIn(getLoggedInUser());
		System.out.println("The logged in User is " + loggedInUser.getName());
		System.out.println("The email of the logged in User is : " + getLoggedInUser());
		
		AdminMessageDB AdminMsgDB = new AdminMessageDB();
		if(AdminMsgDB.getAdminMessage(loggedInUser.getEmail())==null)
			AdminMsgDB.addAdminMessage(new AdminMessage(loggedInUser.getEmail(),new ArrayList<String>(),new ArrayList<String>()));
		
		
		AdminMessage AdminMessage1 = AdminMsgDB.getAdminMessage(loggedInUser.getEmail());
		ArrayList <String> messageAL = AdminMessage1.getMessageAL();

		ArrayList <String> dateAL = AdminMessage1.getDateAL();
		//ArrayList <RadioButton> select = UserMessage1.getSelect();
		ArrayList <AdminMessage> AdminMessageAL = new ArrayList <AdminMessage>();
		//for actual implementation
		//for EACH user , you must run this code
		//then get the SAME user arraylist and store it in
		
		for (int i=0;i<messageAL.size();i++) {	//,select.get(i)
			
			//sub "User1" with loggedInUser.getEmail()
			AdminMessage newAdmin = new AdminMessage(loggedInUser.getEmail(),messageAL.get(i),dateAL.get(i));
		
			
			AdminMessageAL.add(newAdmin);
			
			
		}
		*/
		

}

//No issues - they cannot go into this fxml unless they go the previous one (AdminMessageInbox)
//So will never have null pointer exception
