package healthApp.controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.ResourceBundle;
import java.util.Scanner;

import healthApp.data.EventDB;
import healthApp.model.Event;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.ListView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.DatePicker;

import javafx.scene.control.ChoiceBox;

public class EditEventsController implements Initializable{
	@FXML
	private TextField checkedEventLocation;
	@FXML
	private ListView checkedEventList;
	@FXML
	private ChoiceBox checkedEventCategory;
	@FXML
	private DatePicker checkedEventDate;
	@FXML
	private TextField checkedEventName;
	@FXML
	private TextField checkedEventHour;
	@FXML
	private TextField checkedEventMinute;
	@FXML
	private Button checkedEventSelect;
	@FXML
	private TextField editEventName;
	@FXML
	private DatePicker editEventDate;
	@FXML
	private ChoiceBox editEventCategory;
	@FXML
	private TextField editEventLocation;
	@FXML
	private ListView editEventList;
	@FXML
	private TextArea editEventDescription;
	@FXML
	private TextField editEventHour;
	@FXML
	private TextField editEventMinute;
	@FXML
	private ImageView editEventImage;
	@FXML
	private ListView listedEventList;
	@FXML
	private Button editEventSelect;
	
	private EventDB db = new EventDB();
	private Event deleteEvent;
	private String eventImagePath;
	private ArrayList<String> checkedLocationArray = new ArrayList<String>();
	private ArrayList<String> editLocationArray = new ArrayList<String>();
	private DateTimeFormatter customFormatter = DateTimeFormatter.ofPattern("d MMM yyyy, h:mm a");
	private DateTimeFormatter editFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd-hh-mm");
	
	Path ccPath = FileSystems.getDefault().getPath("locationData", "CCLocation.txt");
	File ccfile = new File(ccPath.toUri());

	
	public void getEditImage(MouseEvent event) throws MalformedURLException {
		String imagepath="";
        FileChooser chooser = new FileChooser();
        chooser.setTitle("Open File");
        chooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Image Files","*.bmp", "*.png", "*.jpg", "*.gif"));
        File file = chooser.showOpenDialog(new Stage());
        if(file != null) {
            imagepath =  file.toURI().toURL().toString();
            System.out.println("file:"+imagepath);
            Image image = new Image(imagepath);
            editEventImage.setImage(image);
        }
        else
        {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Information Dialog");
            alert.setHeaderText("Please Select a File");
            alert.setContentText("You didn't select a file!");
            alert.show();
        }

       eventImagePath = imagepath;
    }
	
	@FXML
	public void checkedSelection(ActionEvent event) {
		// TODO Autogenerated
		String checkedLocation = checkedEventLocation.getText();
		String checkedCategory = (String) checkedEventCategory.getSelectionModel().getSelectedItem();
		String checkedName = checkedEventName.getText();
		String checkedHour = checkedEventHour.getText();
		String checkedMinute = checkedEventMinute.getText();
		String checkedDescription = null;
		String checkedImage = null;
		
		String date = checkedEventDate.getValue().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		String [] fields = date.split("-");
		String checkedYear = fields[0];
		String checkedMonth = fields[1];
		String checkedDay = fields[2];
		
		System.out.println("working1");
		
		if(!(checkedHour.matches("^[0-9]{2}")) || Integer.parseInt(checkedHour) > 23 || checkedHour.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		} 
		else if(!(checkedMinute.matches("^[0-9]{2}")) || Integer.parseInt(checkedMinute) > 59 || checkedMinute.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else if(checkedLocation.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else if(checkedName.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else if(checkedCategory.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else {
			int confirmYear = Integer.parseInt(checkedYear);
			int confirmMonth = Integer.parseInt(checkedMonth);
			int confirmDay = Integer.parseInt(checkedDay);
		
			int confirmHour = Integer.parseInt(checkedHour);
			int confirmMinute = Integer.parseInt(checkedMinute);
			
			LocalDateTime checkedDate = LocalDateTime.of(confirmYear, confirmMonth, confirmDay, confirmHour, confirmMinute);
			Event checkingEvent = new Event(checkedCategory, checkedDate, checkedLocation, checkedName, checkedDescription, checkedImage);
			
			ArrayList<Event> eventList = db.getAllEvents();
			
			System.out.println("working2");
			
			for(Event e : eventList) {
				if(e.getCategory().equals(checkingEvent.getCategory()) && e.getVenue().equals(checkingEvent.getVenue()) && e.getName().equals(checkingEvent.getName()) && e.getEventDateTime().equals(e.getEventDateTime())) {
					editEventName.setText(e.getName());
					editEventLocation.setText(e.getVenue());
					editEventDescription.setText(e.getDescription());
					editEventHour.setText(checkedHour);
					editEventMinute.setText(checkedMinute);
					editEventDate.setValue(checkedEventDate.getValue());
					editEventCategory.setValue(checkedEventCategory.getSelectionModel().getSelectedItem());
					
					Image editImage = new Image(e.getImagePath());
					editEventImage.setImage(editImage);
					
					deleteEvent = e;
				}
			}
				
				for(Event e1 : eventList) {
					if(e1.getVenue().equals(checkingEvent.getVenue())) {
						ObservableList<String> names = FXCollections.observableArrayList(e1.getName());
						listedEventList.getItems().addAll(names);
						System.out.println("ssss");
						
						listedEventList.setOnMouseClicked(new EventHandler<MouseEvent>() {
							public void handle(MouseEvent event) {
								for(Event e2 : eventList) {
									if(listedEventList.getSelectionModel().getSelectedItem().toString().equals(e2.getName())){
										editEventName.setText(e2.getName());
										editEventLocation.setText(e2.getVenue());
										editEventDescription.setText(e2.getDescription());
							
										String date = e2.getEventDateTime().format(editFormatter);
										String [] fields = date.split("-");
										int editYear = Integer.parseInt(fields[0]);
										int editMonth = Integer.parseInt(fields[1]);
										int editDay = Integer.parseInt(fields[2]);
						
										editEventHour.setText(fields[3]);
										editEventMinute.setText(fields[4]);
							
										editEventDate.setValue(LocalDate.of(editYear, editMonth, editDay));
										editEventCategory.setValue(e2.getCategory());
										Image eImg = new Image(e2.getImagePath());
										editEventImage.setImage(eImg);
									}
								}
							}
						});
					}
				}
			}
		}
	
	// Event Listener on Button[#checkedEventSelect].onAction
	public void editSelection(ActionEvent event1) {
		// TODO Autogenerated
		EventDB db = new EventDB();
		String name = editEventName.getText();
		
		String hour = editEventHour.getText();
		String minute = editEventMinute.getText();
		
		String description = editEventDescription.getText();
		String venue = editEventLocation.getText();
		String category = (String) editEventCategory.getSelectionModel().getSelectedItem();
		
		String date = editEventDate.getValue().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		String [] fields = date.split("-");
		String year = fields[0];
		String month = fields[1];
		String day = fields[2];

		if(!(hour.matches("^[0-9]{2}")) || Integer.parseInt(hour) > 23 || hour.equals(null)) {
				Alert eAlert = new Alert(Alert.AlertType.ERROR);
				eAlert.setHeaderText("There is an error");
				eAlert.setContentText("Please ensure all inputs are valid4");
				eAlert.show();
		} 
		else if(!(minute.matches("^[0-9]{2}")) || Integer.parseInt(minute) > 59 || minute.equals(null)) {
				Alert eAlert = new Alert(Alert.AlertType.ERROR);
				eAlert.setHeaderText("There is an error");
				eAlert.setContentText("Please ensure all inputs are valid5");
				eAlert.show();
		}
		else if(venue.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else if(name.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else if(category.equals(null)) {
			Alert eAlert = new Alert(Alert.AlertType.ERROR);
			eAlert.setHeaderText("There is an error");
			eAlert.setContentText("Please ensure all inputs are valid");
			eAlert.show();
		}
		else {
			String eIP = eventImagePath;
			
			int editCheckedYear = Integer.parseInt(year);
			int editCheckedMonth = Integer.parseInt(month);
			int editCheckedDay = Integer.parseInt(day);
		
			int editCheckedHour = Integer.parseInt(hour);
			int editCheckedMinute = Integer.parseInt(minute);
			
			LocalDateTime eDay = LocalDateTime.of(editCheckedYear, editCheckedMonth, editCheckedDay, editCheckedHour, editCheckedMinute);
			Event newEvent = new Event(category, eDay, venue, name, description, eIP);
			db.storeEvent(newEvent);
			db.deleteEvent(deleteEvent.getName());
			
			Alert eAlert = new Alert(Alert.AlertType.CONFIRMATION);
			eAlert.setHeaderText("Event Confirmation");
			eAlert.setContentText("Event has been successfully added!");
			eAlert.show();
			
			editEventHour.clear();
			editEventMinute.clear();
			editEventName.clear();
			editEventDescription.clear();
			editEventLocation.clear();
		}
	}
	
	private void handleSearchByKey(String oldVal, String newVal) {
	    if ( oldVal != null && (newVal.length() < oldVal.length()) ) {
	    	checkedEventList.getItems().clear();
			for(int i = 0; i < checkedLocationArray.size(); i++) {
				ObservableList<String> locations = FXCollections.observableArrayList(checkedLocationArray.get(i).toString());
				checkedEventList.getItems().addAll(locations);

			}	
	    }
	     
	    String[] parts = newVal.toUpperCase().split(" ");
	 
	    ObservableList<String> subentries = FXCollections.observableArrayList();
	    for ( Object entry: checkedEventList.getItems() ) {
	        boolean match = true;
	        String entryText = (String)entry;
	        for ( String part: parts ) {
	            if ( ! entryText.toUpperCase().contains(part) ) {
	                match = false;
	                break;
	            }
	        }
	 
	        if ( match ) {
	            subentries.add(entryText);
	        }
	    }
	    checkedEventList.setItems(subentries);
	}
	
	private void handleSearchByKeyEdit(String oldVal, String newVal) {
	    if ( oldVal != null && (newVal.length() < oldVal.length()) ) {
	    	editEventList.getItems().clear();
			for(int i = 0; i < editLocationArray.size(); i++) {
				ObservableList<String> locations = FXCollections.observableArrayList(editLocationArray.get(i).toString());
				editEventList.getItems().addAll(locations);

			}	
	    }
	     
	    String[] parts = newVal.toUpperCase().split(" ");
	 
	    ObservableList<String> subentries = FXCollections.observableArrayList();
	    for ( Object entry: editEventList.getItems() ) {
	        boolean match = true;
	        String entryText = (String)entry;
	        for ( String part: parts ) {
	            if ( ! entryText.toUpperCase().contains(part) ) {
	                match = false;
	                break;
	            }
	        }
	 
	        if ( match ) {
	            subentries.add(entryText);
	        }
	    }
	    editEventList.setItems(subentries);
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub		
		try(Scanner in = new Scanner(ccfile)){
			while(in.hasNextLine()) {
				checkedLocationArray.add(in.nextLine());
			}
		}
		catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		Collections.sort(checkedLocationArray);
		
		for(int i = 0; i < checkedLocationArray.size(); i++) {
			ObservableList<String> locations = FXCollections.observableArrayList(checkedLocationArray.get(i).toString());
			checkedEventList.getItems().addAll(locations);
			
			checkedEventList.setOnMouseClicked(new EventHandler<MouseEvent>() {
				public void handle(MouseEvent event) { 
						checkedEventLocation.setText(checkedEventList.getSelectionModel().getSelectedItem().toString());
				}
			});

		}
		
	    checkedEventLocation.textProperty().addListener(
	            new ChangeListener() {
	                public void changed(ObservableValue observable, Object oldVal, Object newVal) {
	                    handleSearchByKey((String)oldVal, (String)newVal);
	                }
	    });
	    
		try(Scanner sc = new Scanner(ccfile)){
			while(sc.hasNextLine()) {
				editLocationArray.add(sc.nextLine());
			}
		}
		catch(FileNotFoundException e) {
			e.printStackTrace();
		}
		
		Collections.sort(editLocationArray);
		
		for(int i = 0; i < editLocationArray.size(); i++) {
			ObservableList<String> locations = FXCollections.observableArrayList(editLocationArray.get(i).toString());
			editEventList.getItems().addAll(locations);
			
			editEventList.setOnMouseClicked(new EventHandler<MouseEvent>() {
				public void handle(MouseEvent event) { 
						editEventLocation.setText(editEventList.getSelectionModel().getSelectedItem().toString());
				}
			});

		}
		
	    editEventLocation.textProperty().addListener(
	            new ChangeListener() {
	                public void changed(ObservableValue observable, Object oldVal, Object newVal) {
	                    handleSearchByKeyEdit((String)oldVal, (String)newVal);
	                }
	    });
	    
	    editEventDescription.setWrapText(true);
	    
		checkedEventCategory.getItems().add("Music");
		checkedEventCategory.getItems().add("Art");
		checkedEventCategory.getItems().add("Community Work");
		checkedEventCategory.getItems().add("Health");
		checkedEventCategory.getItems().add("Information & Technology");
		checkedEventCategory.getItems().add("Social");
		checkedEventCategory.getItems().add("Exercise");
		
		editEventCategory.getItems().add("Music");
		editEventCategory.getItems().add("Art");
		editEventCategory.getItems().add("Community Work");
		editEventCategory.getItems().add("Health");
		editEventCategory.getItems().add("Information & Technology");
		editEventCategory.getItems().add("Social");
		editEventCategory.getItems().add("Exercise");
	}
}
